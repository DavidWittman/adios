---
- name: Get the default SSH key
  command: cat ~/.ssh/id_rsa.pub
  register: ssh_key

- name: Create network
  local_action:
    module: gce_net
    name: "{{ gce_network }}"
    state: "present"
    ipv4_range: "{{ gce_ipv4_range }}"
    credentials_file: "{{ gce_json_file_location }}"
    project_id: "{{ gce_project_id }}"
    service_account_email: "{{ gce_service_account_email }}"

- name: Open required ports in the GCE firewall
  local_action:
    module: gce_net
    name: "{{ gce_network }}"
    fwname: "adios"
    allowed: "tcp:{{ ssh_port }};udp:{{ l2tp_port }},{{ l2tp_ike_port }},{{ l2tp_ipsec_port }}"
    state: "present"
    src_range: 0.0.0.0/0
    service_account_email: "{{ gce_service_account_email }}"
    credentials_file: "{{ gce_json_file_location }}"
    project_id: "{{ gce_project_id }}"

- name: Create the GCE instance
  local_action:
    module: gce
    name: "{{ gce_server_name }}"
    network: "{{ gce_network }}"
    zone: "{{ gce_zone }}"
    machine_type: "{{ gce_machine_type }}"
    credentials_file: "{{ gce_json_file_location }}"
    project_id: "{{ gce_project_id }}"
    service_account_email: "{{ gce_service_account_email }}"
    image: "{{ gce_image }}"
    tags: "{{ gce_server_name }}"
    metadata: '{"sshKeys":"root:{{ ssh_key.stdout }}"}'
  register: adios_server

- name: Wait until the server has finished booting and OpenSSH is accepting connections
  wait_for:
    host: "{{ adios_server.instance_data[0].public_ip }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600

- name: Create the in-memory inventory group
  add_host:
    name: "{{ adios_server.instance_data[0].public_ip }}"
    groups: adios-host

- name: Set the adios_ipv4_address variable
  set_fact:
    adios_ipv4_address: "{{ adios_server.instance_data[0].public_ip }}"

- name: Set the adios_server_name variable
  set_fact:
    adios_server_name: "{{ gce_server_name }}"
